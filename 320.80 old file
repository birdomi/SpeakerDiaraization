import numpy as np
import tensorflow as tf
import os
import librosa
import sklearn.preprocessing

batch_size=1500
class Data():
    def __init__(self):
        self._MFCC=[]
        self._LABEL=[]
        self.numberBatch=0

    def Get_Data(self,mfcc_path,label_path='None'):
        """
        for i in range(len(mfcc_path)):
            if(mfcc_path[i]=='.'):
                self.__index=i
        self.__filename=mfcc_path[:self.__index]
        if(os.path.exists(self.__filename+'.mfc')and os.path.exists(self.__filename+'.lab')):
            self.LodaData(mfcc_path,label_path)
        else:
        """
        self.MakeData(mfcc_path,label_path)
        #self._SaveData(mfcc_path,label_path)
            
    def LodaData(self,mfcc_path,label_path):
        self.__mfcc=np.loadtxt(self.__filename+'.mfc')
        self.__label=np.loadtxt(self.__filename+'.lab',int)
        self.__mfcc=np.reshape(self.__mfcc,(-1,320,38))
        self.__label=np.reshape(self.__label,(-1,320))
        print(self.__mfcc)
        print(self.__label)
        
        self.__batch_num=int(len(self.__mfcc)/batch_size)
        for i in range(self.__batch_num):
            self._MFCC.append(self.__mfcc[i*batch_size:(i+1)*batch_size])
            self._LABEL.append(self.__label[i*batch_size:(i+1)*batch_size])
            self.numberBatch+=1
        self._MFCC.append(self.__mfcc[self.__batch_num*batch_size:])
        self._LABEL.append(self.__label[self.__batch_num*batch_size:])
        self.numberBatch+=1

    def MakeData(self,mfcc_path,label_path):
        pass

    def _ExtractMFCC(self,mfcc_path):
        time_windowSteps=80
        time_windowSize=320

        self.__audio,self.__sr=librosa.load(mfcc_path,sr=16000)
        self.__mfcc=librosa.feature.mfcc(self.__audio,self.__sr,n_mfcc=12,hop_length=int(self.__sr/100), n_fft=int(self.__sr/40))

        self.__mfcc1=librosa.feature.delta(self.__mfcc)
        self.__mfcc1_energy=librosa.feature.rmse(S=self.__mfcc1,hop_length=int(self.__sr/100), n_fft=int(self.__sr/40))
        self.__mfcc1=np.append(self.__mfcc1,self.__mfcc1_energy,axis=0)

        self.__mfcc2=librosa.feature.delta(self.__mfcc,order=2)
        self.__mfcc2_energy=librosa.feature.rmse(S=self.__mfcc2,hop_length=int(self.__sr/100), n_fft=int(self.__sr/40))
        self.__mfcc2=np.append(self.__mfcc2,self.__mfcc2_energy,axis=0)

        self.__mfcc=np.append(self.__mfcc,self.__mfcc1,axis=0)
        self.__mfcc=np.append(self.__mfcc,self.__mfcc2,axis=0)
        self.__Tmfcc=np.transpose(self.__mfcc,(1,0))

        #self.__Tmfcc=sklearn.preprocessing.scale(self.__Tmfcc)
        
        time_windowSteps=80
        time_windowSize=320

        self.__data_length=int(len(self.__Tmfcc)/time_windowSteps)
        self.__num_seq=self.__data_length-4

        self.__tmp=[]
        for i in range(self.__num_seq):
            self.__tempSequence=self.__Tmfcc[i*time_windowSteps:(i+4)*time_windowSteps]
            self.__tmp.append(self.__tempSequence)
        self.__tmp=np.reshape(self.__tmp,(-1,time_windowSize,38))
        return self.__tmp
    
    def _LabelMRT(self,label_path,label_weight):
        time_windowSteps=80
        time_windowSize=320

        self.__file=open(label_path,'r')
        self.__lines=self.__file.readlines()
        for self.__line in self.__lines:
            if(self.__line[2:13]=='<Transcript'):
                self.__startTime,self.__endTime=self.__Get_Data_fromMRT(self.__line)
                break
        self.__Label=[0]*int(self.__endTime*100+1)

        for i in range(len(self.__lines)):
            if(self.__lines[i][4:12]=='<Segment'):
                self.__startTime,self.__endTime,self.__speakerName=self.__Get_Data_fromMRT(self.__lines[i])
                if(self.__Is_VocalSound(self.__lines[i+1])):
                    self.__Label[int(self.__startTime*100)]=1
                    self.__Label[int(self.__endTime*100)]=1
        self.__i=0
        while self.__i<(len(self.__Label)):
            if(self.__Label[self.__i]==1):
                for j in range(1,label_weight+1):
                    if(self.__i-j>=0):
                        self.__Label[self.__i-j]=1
                for j in range(1,label_weight+1):
                    if(self.__i+j<len(self.__Label)):
                        self.__Label[self.__i+j]=1
                self.__i+=label_weight+1
            else:
                self.__i+=1
        return self.__Label    
        

    def __Get_Data_fromMRT(self,line):
        self.__dataIndex=[]
        for i in range(len(line)):
            if(line[i]=='"'):
                self.__dataIndex.append(i)

        for i in range(len(self.__dataIndex)):
            if(i%2==0):
                self.__dataIndex[i]+=1

        self.__startTime=float(line[self.__dataIndex[0]:self.__dataIndex[1]])
        self.__endTime=float(line[self.__dataIndex[2]:self.__dataIndex[3]])
        if(len(self.__dataIndex)>4):
            self.__name=line[self.__dataIndex[4]:self.__dataIndex[5]]
            return self.__startTime,self.__endTime,self.__name
        return self.__startTime,self.__endTime

    def __Is_VocalSound(self,line):
        self.__Is_Vocal=True
        for i in range(7):
            if(line[i:i+2]=='<N'or line[i:i+2]=='<C'or line[i:i+2]=='<U'):
                self.__Is_Vocal=False
        return self.__Is_Vocal

    def _SaveData(self,mfcc_path,label_path):
        self.__mfcc=self._MFCC[0]
        self.__label=self._LABEL[0]

        for i in range(1,self.numberBatch):
            self.__mfcc=np.append(self.__mfcc,self._MFCC[i])
            self.__label=np.append(self.__label,self._LABEL[i])
        print(self.__mfcc.shape,self.__label.shape)

        for i in range(len(mfcc_path)):
            if(mfcc_path[i]=='.'):
                self.__index=i
        np.savetxt(mfcc_path[:self.__index]+'.mfc',self.__mfcc,delimiter=' ')
        np.savetxt(mfcc_path[:self.__index]+'.lab',self.__label,delimiter= ' ')



class ICSI_Data(Data):
    def MakeData(self, mfcc_path, label_path):
        self.__BatchMFCC(mfcc_path)
        self.__BatchMRT(label_path,10)

    def __BatchMFCC(self,mfcc_path):
        self.__tmp=self._ExtractMFCC(mfcc_path)
        print(self.__tmp.shape)

        self.__batch_num=int(len(self.__tmp)/batch_size)
        for i in range(self.__batch_num):
            self._MFCC.append(self.__tmp[i*batch_size:(i+1)*batch_size])
            self.numberBatch+=1
        self._MFCC.append(self.__tmp[self.__batch_num*batch_size:])
        self.numberBatch+=1

    
    def __BatchMRT(self,label_path,label_weight):        
        time_windowSteps=80
        time_windowSize=320
        self.__Label=self._LabelMRT(label_path,label_weight)
        self.num_seq=int(len(self.__Label)/time_windowSteps)-4

        self.__tmp=[]
        for i in range(self.num_seq):
            self.__tempSequence=self.__Label[i*time_windowSteps:(i+4)*time_windowSteps]
            self.__tmp.append(self.__tempSequence)
        self.__tmp=np.reshape(self.__tmp,(-1,time_windowSize,1))
        print(self.__tmp.shape)       

        self.__batch_num=int(len(self.__tmp)/batch_size)
        for i in range(self.__batch_num):
            self._LABEL.append(self.__tmp[i*batch_size:(i+1)*batch_size])
        self._LABEL.append(self.__tmp[self.__batch_num*batch_size:])

class KVD_Data(Data):
    def MakeData(self, mfcc_path, label_path):
        self.__BatchMFCC(mfcc_path)
        self.__BatchMRT(label_path,10)

    def __BatchMFCC(self,mfcc_path):
        self.__tmp=self._ExtractMFCC(mfcc_path)
        print(self.__tmp.shape)
        self._MFCC=self.__tmp

    def __BatchMRT(self,label_path,label_weight):
        self.__file=open(label_path,'r')
        self.__lines=self.__file.readlines()
        self.__arrayLength=int(float(self.__lines[0])*100+1)
        
        self.__Label=[0]*self.__arrayLength

        for i in range(1,len(self.__lines)):
            self.__index=int(float(self.__lines[i])*100)
            self.__Label[self.__index]=1
            for j in range(label_weight):
                if(self.__index-j>=0):
                    self.__Label[self.__index-j]=1
                if(self.__index+j<len(self.__Label)):
                    self.__Label[self.__index+j]=1

        time_windowSteps=80
        time_windowSize=320
        self.__tmp=[]
        self.num_seq=int(len(self.__Label)/time_windowSteps)-4
        for i in range(self.num_seq):
            self.__tempSequence=self.__Label[i*time_windowSteps:(i+4)*time_windowSteps]
            self.__tmp.append(self.__tempSequence)
        self.__tmp=np.reshape(self.__tmp,(-1,time_windowSize,1))
        print(self.__tmp.shape)
        self._LABEL=self.__tmp

class Data_time(Data):
    def MakeData(self, mfcc_path, label_path):
        if(label_path=='None'):
            self._MFCC=self._ExtractMFCC(mfcc_path)
        else:
            self._MFCC=self._ExtractMFCC(mfcc_path)
            self._LABEL=self._LabelMRT(label_path,0)

    def Time_MFCC(self,rnn):        
        self.__size=30
        self.__step=10
        self.__tmp=rnn.Make_Result(self._MFCC)
        print(len(self.__tmp))
        self.__num=int(len(self.__tmp)/self.__step-2)

        self.__tmpmfcc=[]
        for i in range(self.__num):
            self.__tmpmfcc.append(self.__tmp[i*self.__step:i*self.__step+self.__size])
        self._MFCC=np.reshape(self.__tmpmfcc,(-1,30))
        print(self._MFCC.shape)

    def Time_LABEL(self):
        self.__tmp=np.reshape(self._LABEL,(-1))        
        self.__tmp=self.__tmp[:int(len(self.__tmp)/80-1)*80]
        print(len(self.__tmp))
        self.__length=int(len(self.__tmp)/10-1)
        print(self.__length)
        self.__tmplabel=[]
        for i in range(1,self.__length):
            self.__Is_1=False
            for j in range(10):
                if(self.__tmp[i*10+j]==1):
                    self.__Is_1=True
            if(self.__Is_1==True):
                self.__tmplabel.append(1)
            else:
                self.__tmplabel.append(0)

        self._LABEL=np.reshape(self.__tmplabel,(-1))
        print(self._LABEL.shape)

class Model():
    def __init__(self,sess,name,learning_rate):
        self.sess=sess
        self.name=name
        self.learning_rate=learning_rate
        self._build_net()

    def _build_net(self):
        pass
    
    def Outputs(self,x,keep_prob=1.0):
        return self.sess.run(self.outputs,feed_dict={self.X:x,self.keep_prob:keep_prob})

    def Train(self,x,y,keep_prob=0.9):
        return self.sess.run([self.cost,self.optimizer],feed_dict={self.X:x,self.Y:y,self.keep_prob:keep_prob})

    def Accuracy(self,x,y):
        self.x_prediction=np.reshape(self.Outputs(x),[-1])
        self.y_prediction=np.reshape(y,[-1])
        
        self.check_for_changePoint=0
        self.check_for_falseAlarm=0
        self.total_changePoint=0
        self.total_non_changePoint=0
        self.accuracy_changePoint=0.0
        self.accuracy_non_changePoint=0.0
        for i in range(len(self.x_prediction)):            
            if(self.y_prediction[i]==1):
                self.total_changePoint=self.total_changePoint+1
                if(self.x_prediction[i]==1):
                    self.check_for_changePoint=self.check_for_changePoint+1
            else:
                self.total_non_changePoint=self.total_non_changePoint+1
                if(self.x_prediction[i]==0):
                    self.check_for_falseAlarm=self.check_for_falseAlarm+1
        print(self.total_changePoint,self.check_for_changePoint)
        if(self.total_changePoint!=0):
            self.accuracy_changePoint=(float)(self.check_for_changePoint/self.total_changePoint)
        if(self.total_non_changePoint!=0):
            self.accuracy_non_changePoint=(float)(self.check_for_falseAlarm/self.total_non_changePoint)
                
        return self.accuracy_changePoint,self.accuracy_non_changePoint

    def Save(self):
        saver=tf.train.Saver()
        saver.save(self.sess, self.name+'/model')

    def Restore(self):
        saver=tf.train.Saver()
        saver.restore(self.sess,self.name+'/model')

class RNN_Model(Model):
    def _build_net(self):
        self.LSTM_layer1=35
        self.LSTM_layer2=35
        self.LSTM_layer3=30

        self.FC_layer1=self.LSTM_layer3*2
        self.FC_layer2=30
        self.FC_layer3=1

        self.X=tf.placeholder(tf.float32,[None,320,38])
        self.Y=tf.placeholder(tf.float32,[None,320,1])
        self.keep_prob=tf.placeholder(tf.float32)

        self._RNN1_cell=tf.contrib.rnn.BasicLSTMCell(self.LSTM_layer1)
        self.RNN1_cell=tf.contrib.rnn.DropoutWrapper(self._RNN1_cell,output_keep_prob=self.keep_prob)

        self._RNN2_cell=tf.contrib.rnn.BasicLSTMCell(self.LSTM_layer2)
        self.RNN2_cell=tf.contrib.rnn.DropoutWrapper(self._RNN2_cell,output_keep_prob=self.keep_prob)
        
        self._RNN3_cell=tf.contrib.rnn.BasicLSTMCell(self.LSTM_layer3)
        self.RNN3_cell=tf.contrib.rnn.DropoutWrapper(self._RNN3_cell,output_keep_prob=self.keep_prob)

        self.cell_fw=[self.RNN1_cell,self.RNN3_cell]
        self.cell_bw=[self.RNN1_cell,self.RNN3_cell]
        self.RNN_output,_,_=tf.contrib.rnn.stack_bidirectional_dynamic_rnn(self.cell_fw,self.cell_bw,self.X,dtype=tf.float32)

        self.fc_input=tf.reshape(self.RNN_output,[-1,self.FC_layer1])

        self.FC1=tf.contrib.layers.fully_connected(self.fc_input,self.FC_layer1,activation_fn=tf.nn.tanh)
        self.FC2=tf.contrib.layers.fully_connected(self.FC1,self.FC_layer2,activation_fn=tf.nn.tanh)
        self.FC3=tf.contrib.layers.fully_connected(self.FC2,self.FC_layer3,activation_fn=tf.sigmoid)

        self.outputs=tf.reshape(self.FC3,[-1,320,1])

        self.cost=-tf.reduce_mean((self.Y * tf.log(self.outputs) + (1 - self.Y) * tf.log(1 - self.outputs)))
        self.optimizer=tf.train.RMSPropOptimizer(learning_rate=self.learning_rate).minimize(self.cost)
        
        self.outputs=tf.cast(self.outputs>0.5,dtype=tf.int32)
    

    def Make_Result(self,x_test,keep_prob=1.0):
        self.result=np.reshape(self.Outputs(x_test),[-1])

        time_windowLength=320
        time_windowSteps=80

        self.Temp=[]
        self.time=(int)(time_windowLength/time_windowSteps)
        
        for i in range(4):
            if(i==0):
                for j in range(time_windowSteps):
                    self.Temp.append(self.result[j])
            if(i==1):
                for j in range(time_windowSteps,2*time_windowSteps):
                    index=j
                    self.tmp_sum=0
                    for k in range(2):
                        self.tmp_sum+=self.result[index+3*k*time_windowSteps]
                    self.Temp.append(self.tmp_sum/2.0)
            if(i==2):
                for j in range(2*time_windowSteps,3*time_windowSteps):
                    index=j
                    self.tmp_sum=0
                    for k in range(3):
                        self.tmp_sum+=self.result[index+3*k*time_windowSteps]
                    self.Temp.append(self.tmp_sum/3.0)

        for i in range(len(x_test)-3):
            step=(i+1)*time_windowLength
            for j in range(step-time_windowSteps,step):
                index=j
                self.tmp_sum=0
                for k in range(4):
                    self.tmp_sum+=self.result[index+3*k*time_windowSteps]
                self.Temp.append(self.tmp_sum/4.0)

        for i in range(len(x_test)-3,len(x_test)):
            step=(i+1)*time_windowLength

            if(i==len(x_test)-3):
               for j in range(step-time_windowSteps,step):
                   index=j
                   self.tmp_sum=0
                   for k in range(3):
                       self.tmp_sum+=self.result[index+3*k*time_windowSteps]
                   self.Temp.append(self.tmp_sum/3.0)
            if(i==len(x_test)-2):
                for j in range(step-time_windowSteps,step):
                   index=j
                   self.tmp_sum=0
                   for k in range(2):
                       self.tmp_sum+=self.result[index+3*k*time_windowSteps]
                   self.Temp.append(self.tmp_sum/2.0)
            if(i==len(x_test)-1):
                step=(i+1)*time_windowLength
                for j in range(step-time_windowSteps,step):
                    self.Temp.append(self.result[j])
        return self.Temp


class FC_Model_for_Find_Time(Model):
    def _build_net(self):
        self.layer1=500
        self.layer2=300
        self.layer3=22
        self.layer4=18
        self.layer5=15
        self.layer6=100
        self.layer7=2

        self.X=tf.placeholder(tf.float32,[None,30])
        self.Y=tf.placeholder(tf.int32,[None])
        self.keep_prob=tf.placeholder(tf.float32)

        self.FC1=tf.contrib.layers.fully_connected(self.X,self.layer1,activation_fn=None)
        self.FC1=tf.nn.dropout(self.FC1,self.keep_prob)
        self.FC2=tf.contrib.layers.fully_connected(self.FC1,self.layer2,activation_fn=None)
        self.FC2=tf.nn.dropout(self.FC2,self.keep_prob)
        self.FC6=tf.contrib.layers.fully_connected(self.FC2,self.layer6,activation_fn=None)
        self.FC6=tf.nn.dropout(self.FC6,self.keep_prob)
        self.FC7=tf.contrib.layers.fully_connected(self.FC6,self.layer7,activation_fn=None)

        self.outputs=self.FC7

        self.cost=tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.outputs,labels=self.Y))
        self.optimizer=tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.cost)
        
        self.outputs=tf.argmax(self.outputs,axis=1)

    def Outputs(self, x, keep_prob = 1.0):
        self.x_outputs=np.reshape(self.sess.run(self.outputs,feed_dict={self.X:x,self.keep_prob:keep_prob}),(-1))
        for i in range(len(self.x_outputs)):
            if(self.x_outputs[i]<0.1):
                self.x_outputs[i]=0
            else:
                self.x_outputs[i]=1
        return self.x_outputs


